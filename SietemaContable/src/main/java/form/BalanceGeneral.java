/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package form;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import logic.models.BalanceGeneralClass;
import logic.CatalogoDeCuentasDatos;

/**
 *
 * @author josue
 */
public class BalanceGeneral extends javax.swing.JPanel {

    /**
     * Creates new form BalanceGeneral
     */
    
    private int empresa_id = 0;
    private String nombreEmpresa;
    public BalanceGeneral(int id_empresa, String nombreEmpresa) {
        initComponents();
        this.empresa_id = id_empresa;
        this.nombreEmpresa = nombreEmpresa;
        
        CatalogoDeCuentasDatos catalogo = new CatalogoDeCuentasDatos();
        List<List<Object>> cuentas = catalogo.libroDiario(empresa_id);
        
        Map<String, List<List<Object>>> diccionario = new HashMap<>();
        
        BalanceGeneralClass balance = new BalanceGeneralClass();
        
        DefaultTableModel activoModel = new DefaultTableModel(new String[]{"", "", "Activos", "",""}, 0);
        DefaultTableModel pasivoModel = new DefaultTableModel(new String[]{"", "", "Pasivos", "",""}, 0);

        for (List<Object> row : cuentas) {
            //System.err.println("Cuentas" + row);
            var nombreCuenta = String.valueOf(row.get(2)) + " - " + (String) row.get(3); // Se asume que la cuenta está en la posición 3
            diccionario.computeIfAbsent(nombreCuenta, k -> new ArrayList<>()).add(row);
            balance.agregarValor(clasificarCuenta(String.valueOf(row.get(2))), row);
        }
        
        System.out.println(balance.obtenerBalance());
        for (Object cuentaObj : balance.obtenerBalance()) {
            List<Object> cuentaInfo = (List<Object>) cuentaObj;
            
            String tipoCuenta = (String) cuentaInfo.get(0); // El tipo de cuenta es el primer elemento
            System.out.println("Tipo de cuenta: " + tipoCuenta);
            
            Object registros = cuentaInfo.get(1); // El segundo elemento son los registros o un mensaje

            if (registros instanceof String) {
                System.out.println(registros); // Si es un mensaje, lo imprimimos
            } else if (registros instanceof List) {
                List<Map<String, Object>> registrosList = (List<Map<String, Object>>) registros;
                
                activoModel.addRow(new Object[]{tipoCuenta,"","","",balance.obtenerTotales().get("Activo Circulante")});
                
                for (Map<String, Object> registro : registrosList) {
                    // Accedemos a cada registro
                    System.out.println("Cuenta: " + registro.get("Cuenta"));
                    System.out.println("Código: " + registro.get("Codigo"));
                    System.out.println("Debe: " + registro.get("Debe"));
                    System.out.println("Haber: " + registro.get("Haber"));
                    System.out.println("----------");
                    activoModel.addRow(new Object[]{registro.get("Cuenta"),registro.get("Debe"),registro.get("Haber"),"",""});
                }
            }
        }
        jTableActivos.setModel(activoModel);
        //System.err.println(balance.obtenerTotales());
    }
    private static String clasificarCuenta(String valor) {
        // Aseguramos que el número de cuenta tenga 8 dígitos
        valor = String.format("%-8s", valor).replace(' ', '0');

        int numero = Integer.parseInt(valor);

        if (numero >= 11000000 && numero <= 11999999) {
            return "Activo Circulante";
        } else if (numero >= 12000000 && numero <= 12999999) {
            return "Activo No Circulante";
        } else if (numero >= 21000000 && numero <= 21999999) {
            return "Pasivo Circulante";
        } else if (numero >= 22000000 && numero <= 22999999) {
            return "Pasivo No Circulante";
        } else if (numero >= 31000000 && numero <= 31999999) {
            return "Patrimonio";
        } else {
            return valor;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableActivos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePasivosPa = new javax.swing.JTable();

        setAutoscrolls(true);

        jTableActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Activos", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableActivos);

        jTablePasivosPa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Pasivos", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTablePasivosPa);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(60, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableActivos;
    private javax.swing.JTable jTablePasivosPa;
    // End of variables declaration//GEN-END:variables
}
